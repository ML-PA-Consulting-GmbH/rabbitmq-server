---

name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:

  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out sources
        uses: actions/checkout@v2
      # - name: Build arm64 snap
      #   uses: snapcore/action-build@v1
      #   with:
      #     path: arm64
      # - name: Build amd64 snap
      #   id: snapamd64
      #   uses: snapcore/action-build@v1
      #   with:
      #     path: amd64
      - name: Simulate snap building
        id: snapamd64
        run: |
          cp delme.nosnap rabbitmq.snap
          echo "::set-output name=snap::rabbitmq.snap"       

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: CHANGELOG.md
          asset_name: mything
          tag: "v123"
          overwrite: true
          body: "This is my release text"

      # - name: Step 1 - Create a temporary artifact downloads folder
      #   run: mkdir artifacts
        
      # - name: step 2 - Add artifacts to publish to the temp folder
      #   run: |
      #     cd artifacts
      #     echo 'alpha'    > alpha.html
      #     echo 'bravo'    > bravo.html
      #     echo 'charlie'  > charlie.html
      #     cd ..
    
      # - name: Step 3 - Use the Upload Artifact GitHub Action
      #   uses: actions/upload-artifact@v2
      #   with: 
      #     name: assets-for-download
      #     path: artifacts

      - name: Find latest version number in CHANGELOG.md
        id: version
        run: |
          sudo snap install --dangerous ${{ steps.snapamd64.outputs.snap }}
          # echo "::set-output name=version::$(snap list | grep rabbitmq-server | sed 's|\s\+|_|g' | cut -d '_' -f 2)"
          # echo "::set-output name=tag::v$(snap list | grep rabbitmq-server | sed 's|\s\+|_|g' | cut -d '_' -f 2)-$(date +%s)"
          echo "::set-output name=release::v$(cat CHANGELOG.md | sed -n  's/^.*\[\([0-9\.\-]\+\).*$/\1/p' | head -1)"

      - name: Check if this is a new release version
        uses: mukunku/tag-exists-action@v1.0.0
        id: checkTag
        with: 
          tag: ${{ steps.version.outputs.release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish this version as release
        if: ${{ steps.checkTag.outputs.exists == 'false' }}
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.release }}
          tag_name: ${{ steps.version.outputs.release }}
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}              
# get installed version
#          snap list | grep rabbitmq-server | sed 's|\s\+|_|g' | cut -d '_' -f 2

        # id: snapcraft
      # - name: Install rabbitmq-server snap
       # run: |
       #   echo "Tests.."
       #   echo $(uname -a)
       #   uname -a          
       #   sudo snap install --devmode ./rabbitmq-server-snap_3.6.10_multi.snap
       #   snap run erlang-test

      # - name: Wait for rabbitmq-server to start
      #   run: |
      #     set -e -u -x
      #     success=0
      #     for i in $(seq 10); do
      #       if sudo snap services rabbitmq-server-snap | grep --quiet enabled; then
      #         success=1
      #         break
      #       fi
      #       sleep 2
      #     done
      #     (( ${success} == 1 ))
      #     success=0
      #     for i in $(seq 10); do
      #       if sudo snap services rabbitmq-server-snap | grep --quiet active; then
      #         success=1
      #         break
      #       fi
      #       sleep 2
      #     done
      #     (( ${success} == 1 ))
      # - name: Check server logs
      #   run: |
      #     set -e -u -x
      #     success=0
      #     for i in $(seq 10); do
      #       if sudo snap logs rabbitmq-server-snap.rabbitmq-server | grep --quiet "Starting broker"; then
      #         success=1
      #         break
      #       fi
      #       sleep 2
      #     done
      #     (( ${success} == 1 ))
      # - name: Check whether process is running
      #   run: pgrep -alf bin/rabbitmq-server
      # - name: Check cluster status
      #   run: |
      #     set -e -u -x
      #     success=0
      #     for i in $(seq 10); do
      #       if sudo rabbitmq-server-snap.rabbitmqctl cluster_status; then
      #         success=1
      #         break
      #       fi
      #       sleep 2
      #     done
      #     (( ${success} == 1 ))
      # - name: Store snap artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: snap
      #     path: ${{ steps.snapcraft.outputs.snap }}
